{"version":3,"sources":["services/api.service.js","assets/img/no-search-result.svg","logo.svg","components/list.js","components/district.js","components/avilability.js","App.js","reportWebVitals.js","seviceWorker.js","index.js"],"names":["axios","require","listAppoinments","id","a","currentDate","moment","Date","format","nextDate","add","get","apiService","List","props","getApi","state","then","res","console","log","data","centers","length","setState","isLoading","catch","err","checkAvilable","sessions","match","params","this","allowMultipleExpanded","map","item","name","className","fee_type","class","val","i","Math","round","available_capacity","date","href","target","center_id","src","img","alt","logo","React","Component","District","district","district_id","district_name","dis","to","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bf5ff424.chunk.js","sourcesContent":["import * as moment from 'moment'\r\nconst axios = require('axios')\r\nexport async function listAppoinments(id) {\r\n    let currentDate=moment( new Date()).format(\"DD-MM-YYYY\");\r\n        let nextDate=moment(currentDate, \"DD-MM-YYYY\"). add(1, 'days').format(\"DD-MM-YYYY\")\r\n    return await axios.get(`https://cdn-api.co-vin.in/api/v2/appointment/sessions/calendarByDistrict?district_id=${id}&date=${nextDate}`)\r\n}","export default __webpack_public_path__ + \"static/media/no-search-result.72df8475.svg\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionItemButton,\r\n  AccordionItemHeading,\r\n  AccordionItemPanel,\r\n} from \"react-accessible-accordion\";\r\nimport \"react-accessible-accordion/dist/fancy-example.css\";\r\nimport img from \"../assets/img/no-search-result.svg\";\r\nimport logo from \"../../src/logo.svg\";\r\n\r\nconst message = \"No appointment is available.\";\r\nconst apiService = require(\"../services/api.service\");\r\n\r\nexport default class List extends React.Component {\r\n    constructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t      id: this.props.match.params.id,\r\n      data: [],\r\n      isLoading: true,\r\n\t\t}\r\n\t}\r\n  componentDidMount() {\r\n    console.log(this.props.match.params.id);\r\n    // this.setState({ isLoading: true });\r\n    this.getApi();\r\n  }\r\n  getApi = async () => {\r\n    await apiService\r\n      .listAppoinments(this.state.id)\r\n      .then((res) => {\r\n        console.log(res.data.centers.length, \"rsssss\");\r\n        this.setState({ data: res.data.centers }, () => {\r\n          this.setState({ isLoading: false });\r\n          console.log(this.state.data.length, \"gettt\");\r\n        });\r\n      })\r\n      .catch((err) => {\r\n         this.setState({ isLoading: false });\r\n        console.log(err);\r\n      });\r\n  };\r\n  checkAvilable = (sessions) => {\r\n    console.log(sessions, \"sessions\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        { this.state.isLoading === false ? (\r\n          <div>\r\n            {this.state.data.length > 0 ? (\r\n              <Accordion allowMultipleExpanded>\r\n                {this.state?.data.map((item) => (\r\n                  <AccordionItem key={item.center_id}>\r\n                    <AccordionItemHeading>\r\n                      <AccordionItemButton>\r\n                        {item.name}{\" \"}\r\n                        <span\r\n                          className={\r\n                            item?.fee_type === \"Free\" ? \"feeType\" : \"paidType\"\r\n                          }\r\n                        >\r\n                          {item.fee_type}\r\n                        </span>\r\n                      </AccordionItemButton>\r\n                    </AccordionItemHeading>\r\n                    <AccordionItemPanel>\r\n                      <table class=\"w3-table w3-bordered\">\r\n                        <tr>\r\n                          <th>available capacity</th>\r\n                          <th>date</th>\r\n                          <th>Action</th>\r\n                        </tr>\r\n                        {item.sessions.map((val, i) => {\r\n                          return (\r\n                            <tr key={i}>\r\n                              <td>{Math.round(val.available_capacity)}</td>\r\n                              <td>{val.date}</td>\r\n                              <td>\r\n                                {\" \"}\r\n                                <a\r\n                                  href=\"https://selfregistration.cowin.gov.in/\"\r\n                                  target=\"_blank\"\r\n                                >\r\n                                  schedule\r\n                                </a>\r\n                              </td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                      </table>\r\n                    </AccordionItemPanel>\r\n                  </AccordionItem>\r\n                ))}\r\n              </Accordion>\r\n            ) : (\r\n              <div className=\"item-center\">\r\n                <div className=\"figure text-center\">\r\n                  <img\r\n                    src={img}\r\n                    className=\"figure-img img-fluid rounded\"\r\n                    alt=\"\"\r\n                  />\r\n                  <div className=\"figure-caption text-center\">\r\n                    <p className=\"h3\">{message}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"App\">\r\n            <header className=\"App-header\">\r\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n             \r\n            </header>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  \r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\n\r\nexport default class District extends React.Component {\r\n  state = {\r\n    district: [\r\n      { district_id: 301, district_name: \"Alappuzha\" },\r\n      { district_id: 307, district_name: \"Ernakulam\" },\r\n      { district_id: 306, district_name: \"Idukki\" },\r\n      { district_id: 297, district_name: \"Kannur\" },\r\n      { district_id: 295, district_name: \"Kasaragod\" },\r\n      { district_id: 298, district_name: \"Kollam\" },\r\n      { district_id: 304, district_name: \"Kottayam\" },\r\n      { district_id: 305, district_name: \"Kozhikode\" },\r\n      { district_id: 302, district_name: \"Malappuram\" },\r\n      { district_id: 308, district_name: \"Palakkad\" },\r\n      { district_id: 300, district_name: \"Pathanamthitta\" },\r\n      { district_id: 296, district_name: \"Thiruvananthapuram\" },\r\n      { district_id: 303, district_name: \"Thrissur\" },\r\n      { district_id: 299, district_name: \"Wayanad\" },\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"container\">\r\n        <h2>List Districts</h2>\r\n        <div class=\"list-group\">\r\n          {this.state.district.map((dis) => {\r\n            return (\r\n                    <NavLink class=\"list-group-item\" \r\n                    to={'/'+dis.district_id}>\r\n                        {dis.district_name}\r\n                       </NavLink>\r\n\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Avilability extends React.Component {\r\n    state= {\r\n    \r\n    }\r\n    \r\n    componentDidMount(){\r\n    }\r\n \r\n    render(){\r\n        return(\r\n            <div>\r\n                {/* <ul>\r\n                    {\r\n                        this.state.district.map((dis)=>{\r\n                            return <li>{dis.district_name}</li>\r\n                        })\r\n                    }\r\n                </ul> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { HashRouter, Route ,Redirect } from \"react-router-dom\";\r\nimport List from './components/list'\r\nimport District from './components/district'\r\nimport Avilability from \"./components/avilability\";\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n    {/* <Switch> */}\r\n      \r\n    {/* </Switch> */}\r\n   \r\n  <Route exact path=\"/\" component={District} />\r\n  <Route exact path=\"/:id\" component={List} />\r\n  <Route exact path=\"/avilability\" component={List} />\r\n\r\n\r\n\r\n  </HashRouter>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from './seviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nserviceWorker.register();"],"sourceRoot":""}