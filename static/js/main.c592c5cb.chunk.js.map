{"version":3,"sources":["assets/img/no-search-result.svg","logo.svg","services/api.service.js","components/list.js","components/district.js","components/avilability.js","App.js","reportWebVitals.js","seviceWorker.js","index.js"],"names":["module","exports","axios","require","listAppoinments","id","a","currentDate","moment","Date","format","nextDate","add","get","apiService","List","props","getApi","state","then","res","console","log","data","centers","length","setState","isLoading","catch","err","checkAvilable","sessions","match","params","place","this","className","Fragment","allowMultipleExpanded","map","item","key","center_id","name","fee_type","class","val","i","Math","round","available_capacity","date","href","target","style","textAlign","marginTop","onClick","window","location","reload","src","img","alt","logo","React","Component","District","district","district_id","district_name","dis","to","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c592c5cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-search-result.867e80f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import * as moment from 'moment'\nconst axios = require('axios')\nexport async function listAppoinments(id) {\n    let currentDate=moment( new Date()).format(\"DD-MM-YYYY\");\n        let nextDate=moment(currentDate, \"DD-MM-YYYY\"). add(1, 'days').format(\"DD-MM-YYYY\")\n    return await axios.get(`https://cdn-api.co-vin.in/api/v2/appointment/sessions/calendarByDistrict?district_id=${id}&date=${nextDate}`)\n}","import React from \"react\";\n\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemButton,\n  AccordionItemHeading,\n  AccordionItemPanel,\n} from \"react-accessible-accordion\";\nimport \"react-accessible-accordion/dist/fancy-example.css\";\nimport img from \"../assets/img/no-search-result.svg\";\nimport logo from \"../../src/logo.svg\";\n\nconst message = \"No appointment is available at\";\nconst apiService = require(\"../services/api.service\");\n\nexport default class List extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      id: this.props.match.params.id,\n      place: this.props.match.params.place,\n\n      data: [],\n      isLoading: true,\n    }\n  }\n  componentDidMount() {\n    console.log(this.props.match.params.id);\n    // this.setState({ isLoading: true });\n    this.getApi();\n  }\n  getApi = async () => {\n    await apiService\n      .listAppoinments(this.state.id)\n      .then((res) => {\n        console.log(res.data.centers.length, \"rsssss\");\n        this.setState({ data: res.data.centers }, () => {\n          this.setState({ isLoading: false });\n          console.log(this.state.data.length, \"gettt\");\n        });\n      })\n      .catch((err) => {\n        this.setState({ isLoading: false });\n        console.log(err);\n      });\n  };\n  checkAvilable = (sessions) => {\n    console.log(sessions, \"sessions\");\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        { this.state.isLoading === false ? (\n          <div>\n            {this.state.data.length > 0 ? (\n              <React.Fragment>\n\n                <Accordion allowMultipleExpanded>\n                  {this.state?.data.map((item) => (\n                    <AccordionItem key={item.center_id}>\n                      <AccordionItemHeading>\n                        <AccordionItemButton>\n                            {item.name}{\" \"}\n                          {/* <div className=\"block-name\">Block Name : {item.block_name}</div> */}\n\n                          <span\n                            className={\n                              item?.fee_type === \"Free\" ? \"feeType\" : \"paidType\"\n                            }\n                          >\n                            {item.fee_type}\n                          </span>\n                        </AccordionItemButton>\n                      </AccordionItemHeading>\n                      <AccordionItemPanel>\n                        <table class=\"w3-table w3-bordered\">\n                          <tr>\n                            <th>available capacity</th>\n                            <th>date</th>\n                            <th>Action</th>\n                          </tr>\n                          {item.sessions.map((val, i) => {\n                            return (\n                              <tr key={i}>\n                                <td>{Math.round(val.available_capacity)}</td>\n                                <td>{val.date}</td>\n                                <td>\n                                  {\" \"}\n                                  <a\n                                    href=\"https://selfregistration.cowin.gov.in/\"\n                                    target=\"_blank\"\n                                  >\n                                    schedule\n                                </a>\n                                </td>\n                              </tr>\n                            );\n                          })}\n                        </table>\n                      </AccordionItemPanel>\n                    </AccordionItem>\n                  ))}\n\n                </Accordion>\n                <div style={{ textAlign: 'center', marginTop: '36px' }}>\n                  <button className=\"refresh\" onClick={() => window.location.reload()}>Refresh</button>\n                </div>\n              </React.Fragment>\n            ) : (\n                <div className=\"item-center\">\n                  <div className=\"figure text-center\">\n                    <img\n                      src={img}\n                      className=\"figure-img img-fluid rounded\"\n                      alt=\"\"\n                    />\n                    <div className=\"figure-caption text-center\">\n                      <p className=\"h3\">{message} {\" \"}{this.state.place}.</p>\n                      <button className=\"refresh\" onClick={() => window.location.reload()}>Refresh</button>\n                    </div>\n                  </div>\n                </div>\n              )}\n          </div>\n        ) : (\n            <div className=\"App\">\n              <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n              </header>\n            </div>\n          )\n        }\n      </div>\n    );\n\n  }\n}\n","import React from \"react\";\nimport { NavLink, Redirect } from \"react-router-dom\";\n\nexport default class District extends React.Component {\n  state = {\n    district: [\n      { district_id: 301, district_name: \"Alappuzha\" },\n      { district_id: 307, district_name: \"Ernakulam\" },\n      { district_id: 306, district_name: \"Idukki\" },\n      { district_id: 297, district_name: \"Kannur\" },\n      { district_id: 295, district_name: \"Kasaragod\" },\n      { district_id: 298, district_name: \"Kollam\" },\n      { district_id: 304, district_name: \"Kottayam\" },\n      { district_id: 305, district_name: \"Kozhikode\" },\n      { district_id: 302, district_name: \"Malappuram\" },\n      { district_id: 308, district_name: \"Palakkad\" },\n      { district_id: 300, district_name: \"Pathanamthitta\" },\n      { district_id: 296, district_name: \"Thiruvananthapuram\" },\n      { district_id: 303, district_name: \"Thrissur\" },\n      { district_id: 299, district_name: \"Wayanad\" },\n    ],\n  };\n\n  componentDidMount() { }\n\n  render() {\n    return (\n      <div class=\"container\">\n        <h2>List Districts</h2>\n        <div class=\"list-group\">\n          {this.state.district.map((dis) => {\n            return (\n              <NavLink class=\"list-group-item\"\n                to={'/' + dis.district_id + '/' + dis.district_name}>\n                {dis.district_name}\n              </NavLink>\n\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class Avilability extends React.Component {\n    state= {\n    \n    }\n    \n    componentDidMount(){\n    }\n \n    render(){\n        return(\n            <div>\n                {/* <ul>\n                    {\n                        this.state.district.map((dis)=>{\n                            return <li>{dis.district_name}</li>\n                        })\n                    }\n                </ul> */}\n            </div>\n        )\n    }\n}\n","import { HashRouter, Route, Redirect } from \"react-router-dom\";\nimport List from './components/list'\nimport District from './components/district'\nimport Avilability from \"./components/avilability\";\nimport './App.css';\nimport React from \"react\";\n\n\nfunction App() {\n  return (\n    <HashRouter>\n      {/* <Switch> */}\n\n      {/* </Switch> */}\n\n      <Route exact path=\"/\" component={District} />\n      <Route exact path=\"/:id/:place\" component={List} />\n      <Route exact path=\"/avilability\" component={List} />\n\n\n\n    </HashRouter>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './seviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();"],"sourceRoot":""}